// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package AzureWebapp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AzureWebApp struct {
	pulumi.ResourceState

	// The website URL.
	WebsiteUrl pulumi.StringOutput `pulumi:"websiteUrl"`
}

// NewAzureWebApp registers a new resource with the given unique name, arguments, and options.
func NewAzureWebApp(ctx *pulumi.Context,
	name string, args *AzureWebAppArgs, opts ...pulumi.ResourceOption) (*AzureWebApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PathToDockerfile == nil {
		return nil, errors.New("invalid value for required argument 'PathToDockerfile'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WebsitePort == nil {
		return nil, errors.New("invalid value for required argument 'WebsitePort'")
	}
	var resource AzureWebApp
	err := ctx.RegisterRemoteComponentResource("x:index:AzureWebApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type azureWebAppArgs struct {
	// Id of app service plan to add web app to
	AppServicePlanId *string `pulumi:"appServicePlanId"`
	// Path to dockerfile for app
	PathToDockerfile string `pulumi:"pathToDockerfile"`
	// Resource group to place resources in
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Port that container is running on
	WebsitePort int `pulumi:"websitePort"`
}

// The set of arguments for constructing a AzureWebApp resource.
type AzureWebAppArgs struct {
	// Id of app service plan to add web app to
	AppServicePlanId pulumi.StringPtrInput
	// Path to dockerfile for app
	PathToDockerfile pulumi.StringInput
	// Resource group to place resources in
	ResourceGroupName pulumi.StringInput
	// Port that container is running on
	WebsitePort pulumi.IntInput
}

func (AzureWebAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureWebAppArgs)(nil)).Elem()
}

type AzureWebAppInput interface {
	pulumi.Input

	ToAzureWebAppOutput() AzureWebAppOutput
	ToAzureWebAppOutputWithContext(ctx context.Context) AzureWebAppOutput
}

func (*AzureWebApp) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureWebApp)(nil))
}

func (i *AzureWebApp) ToAzureWebAppOutput() AzureWebAppOutput {
	return i.ToAzureWebAppOutputWithContext(context.Background())
}

func (i *AzureWebApp) ToAzureWebAppOutputWithContext(ctx context.Context) AzureWebAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureWebAppOutput)
}

func (i *AzureWebApp) ToAzureWebAppPtrOutput() AzureWebAppPtrOutput {
	return i.ToAzureWebAppPtrOutputWithContext(context.Background())
}

func (i *AzureWebApp) ToAzureWebAppPtrOutputWithContext(ctx context.Context) AzureWebAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureWebAppPtrOutput)
}

type AzureWebAppPtrInput interface {
	pulumi.Input

	ToAzureWebAppPtrOutput() AzureWebAppPtrOutput
	ToAzureWebAppPtrOutputWithContext(ctx context.Context) AzureWebAppPtrOutput
}

type azureWebAppPtrType AzureWebAppArgs

func (*azureWebAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureWebApp)(nil))
}

func (i *azureWebAppPtrType) ToAzureWebAppPtrOutput() AzureWebAppPtrOutput {
	return i.ToAzureWebAppPtrOutputWithContext(context.Background())
}

func (i *azureWebAppPtrType) ToAzureWebAppPtrOutputWithContext(ctx context.Context) AzureWebAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureWebAppPtrOutput)
}

// AzureWebAppArrayInput is an input type that accepts AzureWebAppArray and AzureWebAppArrayOutput values.
// You can construct a concrete instance of `AzureWebAppArrayInput` via:
//
//          AzureWebAppArray{ AzureWebAppArgs{...} }
type AzureWebAppArrayInput interface {
	pulumi.Input

	ToAzureWebAppArrayOutput() AzureWebAppArrayOutput
	ToAzureWebAppArrayOutputWithContext(context.Context) AzureWebAppArrayOutput
}

type AzureWebAppArray []AzureWebAppInput

func (AzureWebAppArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AzureWebApp)(nil))
}

func (i AzureWebAppArray) ToAzureWebAppArrayOutput() AzureWebAppArrayOutput {
	return i.ToAzureWebAppArrayOutputWithContext(context.Background())
}

func (i AzureWebAppArray) ToAzureWebAppArrayOutputWithContext(ctx context.Context) AzureWebAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureWebAppArrayOutput)
}

// AzureWebAppMapInput is an input type that accepts AzureWebAppMap and AzureWebAppMapOutput values.
// You can construct a concrete instance of `AzureWebAppMapInput` via:
//
//          AzureWebAppMap{ "key": AzureWebAppArgs{...} }
type AzureWebAppMapInput interface {
	pulumi.Input

	ToAzureWebAppMapOutput() AzureWebAppMapOutput
	ToAzureWebAppMapOutputWithContext(context.Context) AzureWebAppMapOutput
}

type AzureWebAppMap map[string]AzureWebAppInput

func (AzureWebAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AzureWebApp)(nil))
}

func (i AzureWebAppMap) ToAzureWebAppMapOutput() AzureWebAppMapOutput {
	return i.ToAzureWebAppMapOutputWithContext(context.Background())
}

func (i AzureWebAppMap) ToAzureWebAppMapOutputWithContext(ctx context.Context) AzureWebAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureWebAppMapOutput)
}

type AzureWebAppOutput struct {
	*pulumi.OutputState
}

func (AzureWebAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureWebApp)(nil))
}

func (o AzureWebAppOutput) ToAzureWebAppOutput() AzureWebAppOutput {
	return o
}

func (o AzureWebAppOutput) ToAzureWebAppOutputWithContext(ctx context.Context) AzureWebAppOutput {
	return o
}

func (o AzureWebAppOutput) ToAzureWebAppPtrOutput() AzureWebAppPtrOutput {
	return o.ToAzureWebAppPtrOutputWithContext(context.Background())
}

func (o AzureWebAppOutput) ToAzureWebAppPtrOutputWithContext(ctx context.Context) AzureWebAppPtrOutput {
	return o.ApplyT(func(v AzureWebApp) *AzureWebApp {
		return &v
	}).(AzureWebAppPtrOutput)
}

type AzureWebAppPtrOutput struct {
	*pulumi.OutputState
}

func (AzureWebAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureWebApp)(nil))
}

func (o AzureWebAppPtrOutput) ToAzureWebAppPtrOutput() AzureWebAppPtrOutput {
	return o
}

func (o AzureWebAppPtrOutput) ToAzureWebAppPtrOutputWithContext(ctx context.Context) AzureWebAppPtrOutput {
	return o
}

type AzureWebAppArrayOutput struct{ *pulumi.OutputState }

func (AzureWebAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureWebApp)(nil))
}

func (o AzureWebAppArrayOutput) ToAzureWebAppArrayOutput() AzureWebAppArrayOutput {
	return o
}

func (o AzureWebAppArrayOutput) ToAzureWebAppArrayOutputWithContext(ctx context.Context) AzureWebAppArrayOutput {
	return o
}

func (o AzureWebAppArrayOutput) Index(i pulumi.IntInput) AzureWebAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureWebApp {
		return vs[0].([]AzureWebApp)[vs[1].(int)]
	}).(AzureWebAppOutput)
}

type AzureWebAppMapOutput struct{ *pulumi.OutputState }

func (AzureWebAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureWebApp)(nil))
}

func (o AzureWebAppMapOutput) ToAzureWebAppMapOutput() AzureWebAppMapOutput {
	return o
}

func (o AzureWebAppMapOutput) ToAzureWebAppMapOutputWithContext(ctx context.Context) AzureWebAppMapOutput {
	return o
}

func (o AzureWebAppMapOutput) MapIndex(k pulumi.StringInput) AzureWebAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureWebApp {
		return vs[0].(map[string]AzureWebApp)[vs[1].(string)]
	}).(AzureWebAppOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureWebAppOutput{})
	pulumi.RegisterOutputType(AzureWebAppPtrOutput{})
	pulumi.RegisterOutputType(AzureWebAppArrayOutput{})
	pulumi.RegisterOutputType(AzureWebAppMapOutput{})
}
