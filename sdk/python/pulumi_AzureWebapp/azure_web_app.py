# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AzureWebAppArgs', 'AzureWebApp']

@pulumi.input_type
class AzureWebAppArgs:
    def __init__(__self__, *,
                 path_to_dockerfile: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 website_port: pulumi.Input[int],
                 app_service_plan_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AzureWebApp resource.
        :param pulumi.Input[str] path_to_dockerfile: Path to dockerfile for app
        :param pulumi.Input[str] resource_group_name: Resource group to place resources in
        :param pulumi.Input[int] website_port: Port that container is running on
        :param pulumi.Input[str] app_service_plan_id: Id of app service plan to add web app to
        """
        pulumi.set(__self__, "path_to_dockerfile", path_to_dockerfile)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "website_port", website_port)
        if app_service_plan_id is not None:
            pulumi.set(__self__, "app_service_plan_id", app_service_plan_id)

    @property
    @pulumi.getter(name="pathToDockerfile")
    def path_to_dockerfile(self) -> pulumi.Input[str]:
        """
        Path to dockerfile for app
        """
        return pulumi.get(self, "path_to_dockerfile")

    @path_to_dockerfile.setter
    def path_to_dockerfile(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_to_dockerfile", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Resource group to place resources in
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="websitePort")
    def website_port(self) -> pulumi.Input[int]:
        """
        Port that container is running on
        """
        return pulumi.get(self, "website_port")

    @website_port.setter
    def website_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "website_port", value)

    @property
    @pulumi.getter(name="appServicePlanId")
    def app_service_plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of app service plan to add web app to
        """
        return pulumi.get(self, "app_service_plan_id")

    @app_service_plan_id.setter
    def app_service_plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_service_plan_id", value)


class AzureWebApp(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_service_plan_id: Optional[pulumi.Input[str]] = None,
                 path_to_dockerfile: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 website_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a AzureWebApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_service_plan_id: Id of app service plan to add web app to
        :param pulumi.Input[str] path_to_dockerfile: Path to dockerfile for app
        :param pulumi.Input[str] resource_group_name: Resource group to place resources in
        :param pulumi.Input[int] website_port: Port that container is running on
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AzureWebAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AzureWebApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AzureWebAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AzureWebAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_service_plan_id: Optional[pulumi.Input[str]] = None,
                 path_to_dockerfile: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 website_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AzureWebAppArgs.__new__(AzureWebAppArgs)

            __props__.__dict__["app_service_plan_id"] = app_service_plan_id
            if path_to_dockerfile is None and not opts.urn:
                raise TypeError("Missing required property 'path_to_dockerfile'")
            __props__.__dict__["path_to_dockerfile"] = path_to_dockerfile
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if website_port is None and not opts.urn:
                raise TypeError("Missing required property 'website_port'")
            __props__.__dict__["website_port"] = website_port
            __props__.__dict__["website_url"] = None
        super(AzureWebApp, __self__).__init__(
            'x:index:AzureWebApp',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="websiteUrl")
    def website_url(self) -> pulumi.Output[str]:
        """
        The website URL.
        """
        return pulumi.get(self, "website_url")

